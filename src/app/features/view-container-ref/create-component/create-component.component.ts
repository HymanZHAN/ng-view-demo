import {
  ChangeDetectionStrategy,
  Component,
  ComponentRef,
  Renderer2,
  ViewChild,
  ViewContainerRef,
} from "@angular/core";
import { CommonModule } from "@angular/common";
import { CardComponent } from "src/app/components/card/card.component";
import { PicCardComponent } from "src/app/components/card/pic-card.component";
import {
  ArrowDownOutlineComponent,
  ArrowUpOutlineComponent,
  PlusOutlineComponent,
  TrashOutlineComponent,
} from "@components/icons";

@Component({
  selector: "app-create-component",
  standalone: true,
  imports: [
    CommonModule,
    TrashOutlineComponent,
    PlusOutlineComponent,
    ArrowDownOutlineComponent,
    ArrowUpOutlineComponent,
  ],
  templateUrl: "./create-component.component.html",
  styles: [
    `
      :host {
        @apply flex flex-col justify-center items-center w-full;
      }
    `,
  ],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export default class CreateComponentComponent {
  @ViewChild("dynamic", { read: ViewContainerRef }) private container!: ViewContainerRef;

  private counter = 0;
  private selectedCard: ComponentRef<CardComponent | PicCardComponent> | undefined;
  private cards: ComponentRef<CardComponent | PicCardComponent>[] = [];

  constructor(private renderer: Renderer2) {}

  createNewCard(index?: number) {
    const nodes = this.nodesForCard;
    const opts =
      index == undefined ? { projectableNodes: nodes } : { index, projectableNodes: nodes };
    const cmpRef = this.container.createComponent(CardComponent, opts);

    this.setUpCardCmp(cmpRef);
  }

  createNewPicCard(index?: number) {
    const opts = index == undefined ? {} : { index };
    const cmpRef = this.container.createComponent(PicCardComponent, opts);

    this.setUpCardCmp(cmpRef);
  }

  private setUpCardCmp(cmpRef: ComponentRef<CardComponent | PicCardComponent>) {
    const cardIndex = ++this.counter;
    cmpRef.setInput("index", cardIndex);

    const unlisten = this.renderer.listen(cmpRef.location.nativeElement, "click", () => {
      this.cards.forEach((v) => v.setInput("selected", false));
      cmpRef.setInput("selected", true);
      cmpRef.changeDetectorRef.markForCheck();

      this.selectedCard = cmpRef;
    });
    cmpRef.onDestroy = () => unlisten();
    this.cards.push(cmpRef);
  }

  removeCard() {
    this.cards = this.cards.filter((cmp) => cmp !== this.selectedCard);
    this.selectedCard?.destroy();
    this.selectedCard = undefined;
  }

  clearAll() {
    this.container.clear();
    this.counter = 0;
  }

  private get nodesForCard(): Node[][] {
    const titleNode: HTMLParagraphElement = this.renderer.createElement("p");
    this.renderer.setProperty(titleNode, "innerText", "New Card");
    this.renderer.setAttribute(titleNode, "title", "");

    const bodyNode: HTMLParagraphElement = this.renderer.createElement("p");
    this.renderer.setProperty(
      bodyNode,
      "innerHTML",
      "This is a new card generated by <code>createComponent</code>"
    );
    this.renderer.setAttribute(bodyNode, "body", "");

    return [[titleNode], [bodyNode]];
  }
}
