import { Component, Renderer2, ViewChild, ViewContainerRef } from "@angular/core";
import { CardComponent } from "src/app/components/card/card.component";
import { PicCardComponent } from "src/app/components/card/pic-card.component";

@Component({
  selector: "app-view-container-ref",
  standalone: true,
  imports: [],
  templateUrl: "./view-container-ref.component.html",
  styles: [
    `
      :host {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: 100%;
      }
    `,
  ],
})
export default class ViewContainerRefComponent {
  @ViewChild("dynamic", { read: ViewContainerRef }) container!: ViewContainerRef;

  constructor(private renderer: Renderer2) {}

  createNewCard(index?: number) {
    const nodes = this.nodesForCard;
    const opts =
      index == undefined ? { projectableNodes: nodes } : { index, projectableNodes: nodes };
    this.container.createComponent(CardComponent, opts);
  }
  private get nodesForCard(): Node[][] {
    const titleNode: HTMLParagraphElement = this.renderer.createElement("p");
    this.renderer.setProperty(titleNode, "innerText", "New Card");
    this.renderer.setAttribute(titleNode, "title", "");

    const bodyNode: HTMLParagraphElement = this.renderer.createElement("p");
    this.renderer.setProperty(
      bodyNode,
      "innerHTML",
      "This is a new card generated by <code>createComponent</code>"
    );
    this.renderer.setAttribute(bodyNode, "body", "");

    return [[titleNode], [bodyNode]];
  }

  createNewPicCard(index?: number) {
    const opts = index == undefined ? {} : { index };
    this.container.createComponent(PicCardComponent, opts);
  }
}
