import { Component, Renderer2, ViewChild, ViewContainerRef } from "@angular/core";
import { CardComponent } from "src/app/components/card/card.component";

@Component({
  selector: "app-view-container-ref",
  standalone: true,
  imports: [CardComponent],
  template: `
    <app-card>
      <ng-container title>What is a view container?</ng-container>
      <ng-container body>
        <p>
          The smallest grouping of display elements that can be
          <strong>created and destroyed together</strong>.
        </p>
        <p>A component class and its associated template define a view.</p>
      </ng-container>
    </app-card>

    <button class="btn btn-outline btn-info" (click)="createNewCard()">New Card</button>

    <ng-container #dynamic></ng-container>
  `,
  styles: [
    `
      :host {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: 100%;
      }
    `,
  ],
})
export default class ViewContainerRefComponent {
  @ViewChild("dynamic", { read: ViewContainerRef }) container!: ViewContainerRef;

  constructor(private renderer: Renderer2) {}

  createNewCard() {
    const nodes = this.buildNodesForNewCard();
    this.container.createComponent(CardComponent, { projectableNodes: nodes });
  }

  private buildNodesForNewCard(): Node[][] {
    const titleNode: HTMLParagraphElement = this.renderer.createElement("p");
    this.renderer.setProperty(titleNode, "innerText", "New Card");
    this.renderer.setAttribute(titleNode, "title", "");

    const bodyNode: HTMLParagraphElement = this.renderer.createElement("p");
    this.renderer.setProperty(
      bodyNode,
      "innerHTML",
      "This is a new card generated by <code>createComponent</code>"
    );
    this.renderer.setAttribute(bodyNode, "body", "");

    return [[titleNode], [bodyNode]];
  }
}
